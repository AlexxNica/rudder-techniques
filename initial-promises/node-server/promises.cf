#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

#######################################################
#
# promises.cf
#
#######################################################
bundle common rudder_roles
{
  # variables are defined in bundle common g
  classes:
      # Policy Server is a machine which delivers promises
      "policy_server" expression => strcmp("root","${g.uuid}");
      # Root Server is the top policy server machine
      "root_server" expression => strcmp("root","${g.uuid}");


      # on changes only, we only reports on repaired or error message
      "changes_only"     expression => strcmp("full-compliance", "changes-only");
      "reports_disabled" expression => strcmp("full-compliance", "reports-disabled");

      # full compliance is the default mode
      "full_compliance" not => "changes_only|reports_disabled";
}

body common control
{
    any::
        output_prefix => "rudder";
        
        protocol_version   => "classic";

        inputs => {
          @{va.inputs_list},
          "rudder_system_directives.cf",
          "rudder_directives.cf"
        };

        bundlesequence => { 
          @{va.common_bs},
          @{va.specific_bs},
          rudder_system_directives,
          rudder_directives,
          @{va.end}
        };

    android::
        # if native syslog is not available, use cfengine implementation (eg: android)
        syslog_host => "${server_info.cfserved}";
        syslog_port => "${install_rsyslogd.rsyslog_port[2]}";
}

bundle common va
{
  vars:

      "end" slist => {
        "endExecution"
      };

      # all other inputs are loaded by body file control in rudder_system_directives.cf and rudder_directives.cf
      "inputs_list" slist => { @{ncf_inputs} };

      "common_bs" slist => {
        "startup",
        "check_disable_agent",
        "clean_red_button",
        "update",
        "configuration",
        "set_red_button",
        "internal_security",
        "check_red_button_status",
        "check_cf_processes",
        "check_uuid",
        "garbage_collection",
        "setup_cronjob",
        "check_cron_daemon",
        "fetchFusionTools",
        "virtualMachines",
        "doInventory",      };

    policy_server::

      "specific_bs" slist => {
        "install_rsyslogd",
        "propagatePromises",
        "sendInventoryToCmdb",
        "root_component_check",        # This bundle is duplicated to avoid having empty lists and cfnull in bundlesequence
        "check_binaries_freshness",
      };

      # initial promises server specific inputs cannot be loaded from rudder_system_directives.cf
      "inputs_list" slist => { @{ncf_inputs}, "distributePolicy/1.0/propagatePromises.cf","distributePolicy/1.0/rsyslogConf.cf","server-roles/1.0/service-check.cf","server-roles/1.0/postgres-check.cf","server-roles/1.0/logrotate-check.cf", "server-roles/1.0/servers-by-role.cf", "server-roles/1.0/integrity-check.cf","server-roles/1.0/technique-reload.cf","server-roles/1.0/network-check.cf","server-roles/1.0/alive-check.cf","server-roles/1.0/password-check.cf", "server-roles/1.0/component-check.cf" };
    !policy_server::

      # This bundle is duplicated to avoid having empty lists and cfnull in bundlesequence
      "specific_bs" slist => { "check_binaries_freshness" }

      "inputs_list" slist => { @{ncf_inputs} };

    !android.!windows::
      "rudder_var"     string => "/var/rudder";
    android::
      "rudder_var"     string => "/data/rudder";

    !windows::
      "ncf_path"       string => "${rudder_var}/ncf";
      "rudder_tools"   string => "${rudder_var}/tools";
      "shell_type"     string => "useshell";
      "list_compatible_inputs" string => "NCF_CACHE_PATH=${sys.workdir}/state /bin/sh ${ncf_path}/common/10_ncf_internals/list-compatible-inputs";

    windows::
      "rudder_base"    string => "${sys.winprogdir}\Rudder";
      "rudder_tools"   string => "${rudder_base}\sbin";
      "ncf_path"       string => "${rudder_base}\var\ncf";
      "shell_type"     string => "powershell";
      # & is for powershell commands
      "list_compatible_inputs" string => "& '${ncf_path}\common\10_ncf_internals\list-compatible-inputs.ps1\'";

    any::
      "path_ncf_common_inputs_10" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' common/10_ncf_internals", "${shell_type}"), "\n", 10000);
      "path_ncf_common_inputs_20" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' common/20_cfe_basics", "${shell_type}"), "\n", 10000);
      "path_ncf_common_inputs_30" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' common/30_generic_methods", "${shell_type}"), "\n", 10000);
      "path_ncf_common_inputs_40" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' common/40_it_ops_knowledge", "${shell_type}"), "\n", 10000);
      "path_ncf_common_inputs_50" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' common/50_techniques", "${shell_type}"), "\n", 10000);
      "path_ncf_common_inputs_60" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' common/60_services", "${shell_type}"), "\n", 10000);

      "path_ncf_local_inputs_10" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' local/10_ncf_internals", "${shell_type}"), "\n", 10000);
      "path_ncf_local_inputs_20" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' local/20_cfe_basics", "${shell_type}"), "\n", 10000);
      "path_ncf_local_inputs_30" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' local/30_generic_methods", "${shell_type}"), "\n", 10000);
      "path_ncf_local_inputs_40" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' local/40_it_ops_knowledge", "${shell_type}"), "\n", 10000);
      # Files from 50_techniques are automatically included by Rudder's metadata.xml mechanism
      "path_ncf_local_inputs_60" slist => splitstring(execresult("${list_compatible_inputs} ${sys.cf_version} '${ncf_path}' local/60_services", "${shell_type}"), "\n", 10000);

      # Must concatenate all lists + filter, as maplist on an empty element returns cf_null
      "raw_path_ncf_inputs" slist => { @{path_ncf_common_inputs_10}, @{path_ncf_local_inputs_10}, @{path_ncf_common_inputs_20}, @{path_ncf_local_inputs_20}, @{path_ncf_common_inputs_30}, @{path_ncf_local_inputs_30}, @{path_ncf_common_inputs_40}, @{path_ncf_local_inputs_40}, @{path_ncf_common_inputs_50}, @{path_ncf_common_inputs_60}, @{path_ncf_local_inputs_60}},
                           policy => "ifdefined";

       "raw_ncf_inputs"     slist => maplist("${ncf_path}/${this}", @{raw_path_ncf_inputs});
       # Need to remove cf_null from the list
       "ncf_inputs"         slist => filter("${ncf_path}/cf_null", "raw_ncf_inputs", "false", "true", 10000);

    # definition of the machine roles
# This node doesn't have any specific role
    # policy_server and root_server migrated to rudder_roles
}

#########################################################
# Control execution
#########################################################
bundle agent startup
{
  methods:
    # Should we send a message stating this agent is starting up?
    # Always do it in "full_compliance" mode
    # In other modes, only do it here if we need to send it as a "heartbeat", that is if it hasn't already been sent recently enough
    full_compliance|!heartbeat_sent::
      "Send start message"
        usebundle => startExecution,
        action    => immediate;
}

# startExecution and endExecution have migrated to rudder-stdlib-core.st

##########################################################
# Check for "disable-agent" file and cleanly stop and
# warn about this if it is present
#
# All promises in this bundle MUST have action=>immediate,
# to avoid locking issues in case of several close runs.
##########################################################
bundle agent check_disable_agent
{
  vars:
      "components" slist => { "cf-serverd", "cf-execd", "cf-monitord" };

  classes:
      "should_disable_agent" expression => fileexists("${g.rudder_disable_agent_file}"),
                             action     => immediate;

      # Only define this class when we're ready to die - this is a special class name in "abortclasses"
      "should_not_continue"
        expression => "should_disable_agent.!ignore_disable_agent",
        ifvarclass => "abort_report_done",
        action     => immediate;

  processes:
    should_disable_agent::
      "${sys.workdir}/bin/${components}"
        signals       => { "term", "kill" },
        action        => immediate;

  reports:
    should_disable_agent::
      "FATAL: The file ${g.rudder_disable_agent_file} is present. Rudder will kill all running daemons and halt immediately."
        classes => if_ok("abort_report_done"),
        action  => immediate;

}


##########################################################
# Red Button part.
# When the file ${sys.workdir}/inputs/stop exists, we must stop the
# execution of the agent on all client machines
##########################################################
bundle agent clean_red_button()
{
  files:
    safe.policy_server::
      "${g.rudder_var}/share/[a-f0-9A-F\-]+/rules/cfengine-(community|nova)/stopFile"
        delete => tidy,
        comment => "Deleting the stop file on clients promises, cfengine is good to go";

    safe.!policy_server::
      "${sys.workdir}/inputs/stopFile"
        delete => tidy,
        comment => "Deleting the stop file, cfengine is good to go";

  methods:
    safe::
      "any" usebundle => rudder_common_report("Common", "result_repaired", "hasPolicyServer-root@@common-root@@00", "Red Button", "None", "Authorizing Cfengine to restart");

  commands:
    safe.policy_server::
      "${sys.workdir}/bin/cf-runagent"
        args => "-Dsafe",
        comment => "Propagate the safe information to children";

}

bundle agent set_red_button()
{
  classes:
    policy_server::
      "danger" expression => fileexists("${g.rudder_var}/share/root/stopFile");
  methods:
    danger::
      "any" usebundle => setStopFile;

    danger.policy_server::
      "any" usebundle => stopClients;
}

bundle agent setStopFile
{
  files:
    danger.!policy_server::
      "${sys.workdir}/inputs/stopFile"
        create => "true";
    danger.policy_server::
      "${g.rudder_var}/share/[a-f0-9A-F\-]+/rules/cfengine-(community|nova)/stopFile"
        create => "true";



  methods:
    danger.!policy_server::
      "any" usebundle => rudder_common_report("Common", "result_repaired", "hasPolicyServer-root@@common-root@@00", "Red Button", "None", "Creating local stop file for this node");
    danger.policy_server::
      "any" usebundle => rudder_common_report("Common", "result_repaired", "hasPolicyServer-root@@common-root@@00", "Red Button", "None", "Creating stop files for all clients of this policy server");

}

bundle agent stopClients
{
  classes:
    policy_server::
      "danger" expression => fileexists("${g.rudder_var}/share/root/stopFile");

  methods:
    danger.policy_server::
      "any" usebundle => rudder_common_report("Common", "log_repaired", "hasPolicyServer-root@@common-root@@00", "Red Button", "None", "Actively stopping CFEngine operations on all clients of this policy server (via cf-runagent)");

  commands:
    danger.policy_server::
      "${sys.workdir}/bin/cf-runagent"
        args => "-Ddanger",
        comment => "Propagate the danger information to children";

}

bundle agent check_red_button_status()
{
  classes:
    !policy_server::
      "should_not_continue" expression => fileexists("${sys.workdir}/inputs/stopFile");

  methods:
    !should_not_continue::
      "any" usebundle => rudder_common_report("Common", "result_success", "hasPolicyServer-root@@common-root@@00", "Red Button", "None", "Red Button is not in effect, continuing as normal...");

}


###################################################
# Check that CFengine services are up
###################################################
bundle agent check_cf_processes
{
  methods:
    !ignore_disable_agent::
      "any" usebundle => check_cf_processes_running;
}
bundle agent check_cf_processes_running
{
  vars:

      # process_term defines how many maximum instances of this
      # binary should be running before attempting to SIGTERM them.
      # process_kill is the same for SIGKILL.
    !windows::
      # On windows, cf-execd is a service, and there can be only one instance of it running (by design)
      "process_term[execd]" string => "2";
      "process_kill[execd]" string => "5";

    any::
      "process_term[agent]" string => "5";
      "process_kill[agent]" string => "8";

      "binaries"            slist  => getindices("process_term");

  classes:
    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass3::

      "any" usebundle => rudder_common_report("Common", "result_success", "hasPolicyServer-root@@common-root@@00", "Process checking", "None", "There is an acceptable number of CFEngine processes running on the machine"),
      # Here, I can not use the binaries variable as CFEngine will iterate and output two reports, breaking the reporting.
        ifvarclass => "!agent_has_gone_wild.!agent_has_gone_really_wild.!execd_has_gone_wild.!execd_has_gone_really_wild";

      "any" usebundle => rudder_common_report("Common", "result_repaired", "hasPolicyServer-root@@common-root@@00", "Process checking", "None", "Warning, more than ${process_term[${binaries}]} cf-${binaries} processes were detected. They have been sent a graceful termination signal."),
        ifvarclass => "${binaries}_has_gone_wild.!${binaries}_has_gone_really_wild";

      "any" usebundle => rudder_common_report("Common", "result_error", "hasPolicyServer-root@@common-root@@00", "Process checking", "None", "ALERT: more than ${process_term[${binaries}]} cf-${binaries} processes were detected. Killing processes that do not respect graceful termination signals."),
        ifvarclass => "${binaries}_has_gone_really_wild";

  processes:
    !windows::
      "${sys.workdir}/bin/cf-serverd"  restart_class => "start_server";
      "${sys.workdir}/bin/cf-execd"    restart_class => "start_executor";

      # If there are more than 2 cf-execd's, it means cf-execd is starting to
      # go crazy, so we ask politely to these processes to shut down.

      "${sys.workdir}/bin/cf-${binaries}"
        process_count => check_range("${binaries}", "0","${process_term[${binaries}]}"),
        signals       => { "term" },
        classes       => if_repaired("${binaries}_has_gone_wild"),
        comment       => "Checking if cf-${binaries} has gone wild";

      # If there are too much cf-execd's/cf-agents running, it means that they are really
      # going crazy. Let's be a bit less polite and more violent about killing them.
      #
      # These two promises overlap, because when you go past the 2/5-limit treshold,
      # you still leave a chance for them to die with SIGTERM before the SIGKILL.
      #
      # Reason: The backend databases that stores the classes and some runtime
      # parameters do really not appreciate beeing killed violently and may prevent
      # the agent from operating properly.

      "${sys.workdir}/bin/cf-${binaries}"
        process_count => check_range("${binaries}", "0","${process_kill[${binaries}]}"),
        signals       => { "kill" },
        classes       => if_repaired("${binaries}_has_gone_really_wild"),
        comment       => "Checking if cf-${binaries} has gone really wild";

    !windows.should_disable_server::
      "${sys.workdir}/bin/cf-serverd"
        signals       => { "term", "kill" },
        action        => immediate;

    windows::
      # Using the path on windows fails, as process are not reported the same way
      # And unfortunately, the cf-serverd is not a service.
      "cf-serverd"  restart_class => "start_server";

      # Windows does only implement SIGTERM. Using SIGKILL makes no sense on it.
      "cf-${binaries}"
        process_count => check_range("${binaries}", "0","${process_term[${binaries}]}"),
        signals       => { "term" },
        classes       => if_repaired("${binaries}_has_gone_wild"),
        comment       => "Checking if cf-${binaries} has gone wild";

    windows.should_disable_server::
      "cf-serverd"
        signals       => { "term" },
        action        => immediate;

  services:
    # By design, there can be only one cf-execd service running on Windows
    windows::
      "CfengineNovaExec"
        service_policy => "start",
        service_method => u_bootstart,
        comment => "Start the executor windows service now and at boot time";

  commands:
    !should_disable_server.start_server::
      "${sys.cf_serverd}"
        action  => u_ifwin_bg,
        classes => outcome("server");

    start_executor::
      "${sys.cf_execd}"
        action  => u_ifwin_bg,
        classes => outcome("executor");

}


# Log and reporting configuration not valid in initial promises
###################################################################
# Trash every output report and modified files older than the TTL #
###################################################################

bundle agent garbage_collection
{
  vars:
      "log_files_to_rotate" slist => {
                                        "${sys.workdir}/cf3.${sys.uqhost}.runlog",
                                        "${sys.workdir}/promise_summary.log",
                                        "${sys.workdir}/cf_notkept.log",
                                        "${sys.workdir}/cf_repair.log",
                                     };

  files:

      "${sys.workdir}/outputs"

        delete => tidy,
        file_select => days_old("7"),
        depth_search => recurse("inf");

      "${g.rudder_var}/modified-files"

        delete => tidy,
        file_select => days_old("30"),
        depth_search => recurse("inf");

      "${log_files_to_rotate}"
        comment     => "Rotate file if above specified size",
        rename      => rotate("10"),
        file_select => bigger_than("1M");
}

#######################################################
# Copy the CFengine binaries from the /opt repository
# to the CFengine working directory

bundle agent check_binaries_freshness
{
  vars:

    community_edition::

      "components" slist => { "cf-agent", "cf-serverd", "cf-execd", "cf-monitord", "cf-promises", "cf-runagent", "cf-key", "rpmvercmp" };

  files:

    !android.!nova_edition::
      "${sys.workdir}/bin/${components}"
        perms => u_p("755"),
        copy_from => cp("${g.rudder_bin}/${components}", "localhost"),
        classes => kept_if_else("binaries_fresh", "binaries_rotten", "binaries_missing"),
        action => immediate,
        comment => "Copying the CFengine binaries from ${g.rudder_sbin}/sbin to ${sys.workdir}/bin";

  methods:

    binaries_fresh.!binaries_rotten.!binaries_missing::
      "any" usebundle => rudder_common_report("Common", "result_success", "hasPolicyServer-root@@common-root@@00", "Binaries update", "None", "The CFengine binaries in ${sys.workdir}/bin are up to date");

    binaries_rotten.!binaries_missing::
      "any" usebundle => rudder_common_report("Common", "result_repaired", "hasPolicyServer-root@@common-root@@00", "Binaries update", "None", "The CFengine binaries have been updated in ${sys.workdir}/bin");

    binaries_missing::
      "any" usebundle => rudder_common_report("Common", "result_error", "hasPolicyServer-root@@common-root@@00", "Binaries update", "None", "An error occurred while updating the CFengine binaries in ${sys.workdir}/bin");

    android::
      "any" usebundle => rudder_common_report("Common", "result_success", "hasPolicyServer-root@@common-root@@00", "Binaries update", "None", "This is an android machine: no CFEngine binaries update needed");

    nova_edition::
      "any" usebundle => rudder_common_report("Common", "result_na", "hasPolicyServer-root@@common-root@@00", "Binaries update", "None", "This is an CFEngine enterprise system: binaries update are handled differently");

}

#######################################################

body agent control
{
    # if default runtime is 5 mins we need this for long jobs
        ifelapsed => "1";

    #define here some environment variables
        environment => { "DEBIAN_FRONTEND=noninteractive" };

        abortclasses => { "should_not_continue" };

        agentfacility => "LOG_LOCAL6";

        skipidentify => "true";

  # Repository where to put the copy of modified files
        default_repository => "${g.rudder_var}/modified-files";

}

#######################################################

body executor control
{
        splaytime => "1";
        schedule         => { "Min00", "Min05", "Min10", "Min15", "Min20", "Min25", "Min30", "Min35", "Min40", "Min45", "Min50", "Min55" };
        executorfacility => "LOG_DAEMON";

   windows::
        # CFEngine best practice is to use full paths on Windows
        exec_command => "${sys.cf_agent} -f \"${sys.workdir}\inputs\failsafe.cf\" & ${sys.cf_agent}";

   !windows::
        exec_command => "${sys.cf_agent} -f failsafe.cf && ${sys.cf_agent}";

}

########################################################

#Enforce that the file only contains this information
bundle edit_line enforce_content(str)
{
  delete_lines:
      "${str}" not_matching => "true";

  insert_lines:
      "${str}";
}

# Never used in initial promises
