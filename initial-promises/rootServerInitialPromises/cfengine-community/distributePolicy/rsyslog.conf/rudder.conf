# Rsyslog Rudder configuration

# Provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 514

# Provide udp for snare and compatibility with older syslog
$ModLoad imudp
$UDPServerRun 514

# Load postgres module
$ModLoad ompgsql

# for Snare client
$EscapeControlCharactersOnReceive off  

# Log everything 
#*.*	/var/log/all.log
*.*	/var/log/rudder/reports/all.log


# The RudderDbLinuxReportFormat, for the manipulation with the application
# nodeId : the node id
# ruleId : the Rule Id
# directiveId : the directive id
# eventtype : the severity
# policy : the policy name


#  format is @@Policy@@State@@RuleId@@DirectiveId@@VersionId@@Component@@Key@@ExecutionTimeStamp##NodeId@#HumanReadableMessage



$template RudderDbLinuxReportFormat,"insert into RudderSysEvents (executionDate, nodeId, ruleId, directiveId, serial, Component, KeyValue, executionTimeStamp, eventType, msg, Policy) values ('%timereported:::date-rfc3339%','%msg:R,ERE,1,DFLT:.*##(.*)@#.*--end%', '%msg:R,ERE,1,DFLT:.*@@.*@@.*@@(.*)@@.*@@.*@@.*@@.*@@.*##.*--end%' , '%msg:R,ERE,1,ZERO:.*@@.*@@.*@@.*@@(.*)@@.*@@.*@@.*@@.*##.*--end%', '%msg:R,ERE,1,DFLT:.*@@.*@@.*@@.*@@.*@@(.*)@@.*@@.*@@.*##.*--end%', '%msg:R,ERE,1,DFLT:.*@@.*@@.*@@.*@@.*@@.*@@(.*)@@.*@@.*##.*--end%', '%msg:R,ERE,1,DFLT:.*@@.*@@.*@@.*@@.*@@.*@@.*@@(.*)@@.*##.*--end%', '%msg:R,ERE,1,DFLT:.*@@.*@@.*@@.*@@.*@@.*@@.*@@.*@@(.*)##.*--end%', '%msg:R,ERE,1,DFLT:.*@@.*@@(.*)@@.*@@.*@@.*@@.*@@.*@@.*##.*--end%', '%msg:R,ERE,1,DFLT:.*@#(.*)--end%', '%msg:R,ERE,1,DFLT:.*@@(.*)@@.*@@.*--end%' )",stdsql

# Windows templates for inserting in database
$template RudderDbWindowsReportFormat,"insert into RudderSysEvents (executionDate, nodeId, ruleId, directiveId, eventType, msg, Policy) values ('%timereported:::date-rfc3339%','%msg:R,ERE,1,FIELD:.*##(.*)@#.*--end%', '%msg:R,ERE,1,FIELD:.*@@.*@@.*@@(.*)#@.*--end%' , '%msg:R,ERE,1,FIELD:.*#@(.*)##.*--end%', '%msg:R,ERE,1,FIELD:.*@@.*@@(.*)@@.*#@.*--end%', '%msg:R,ERE,1,BLANK:.*@#(.*)--end%', '%msg:R,ERE,1,FIELD:.*@@(.*)@@.*@@.*--end%' )",stdsql


# We start by logging all the Windows and Linux message
:programname, contains, "rudder" /var/log/rudder/reports/linuxlog.log
:programname, contains, "MSWinEventLog" /var/log/rudder/reports/winlog.log

# Filtering by content
# Process :
# We first log the data in the file, then in the database, and we drop the message

# Linux Part

if $programname startswith 'rudder' and $msg startswith '  R: @@' then /var/log/rudder/reports/extLinuxReport.log


# Enforce the content of the line with a regular expression
:msg, ereregex, "R: @@[ a-zA-Z0-9\-]+?@@[a-zA-Z0-9_\-]{1,64}?@@[a-zA-Z0-9\-]+@@[a-zA-Z0-9\-]+?@@[0-9]+?@@.{1,64}?@@.{1,64}?@@[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{2}:[0-9]{2}##[a-zA-Z0-9\-]+?@#.*"  :ompgsql:localhost,rudder,rudder,Normation;RudderDbLinuxReportFormat


# We shouldn't have any rudder message here left
if $programname startswith 'rudder' then ~

# Should remain only program with non-Rudder

# We are only interested in windows message, set via E2S
# Drop all non-windows messages

:msg, regex, ".*Description: rudder.*@@.*@@.*@@.*#@.*@#.*"  /var/log/rudder/reports/extWinReport.log
:msg, regex, ".*Description: rudder.*@@.*@@.*@@.*#@.*@#.*" :ompgsql:localhost,rudder,rudder,Normation;RudderDbWindowsReportFormat
:msg, regex, ".*Description: rudder.*@@.*@@.*@@.*#@.*@#.*"   ~




